"""
Developer: Cindy CM
Date: 1/01/2025
Purpose:
For Python to read and run R scripts for automation.

Setting up the Working Directory
In this section, the code retrieves the user's login name, constructs paths for the working directory, checks if the directory exists, switches to an alternative path if necessary,
changes the working directory, and finally defines the OneDrive path.
This setup ensures that the script operates within the correct directory structures based on the user's environment.

Files Being Read In
For this portion of the code, it dynamically constructs file paths for a list of R scripts, checks if the paths exist, and prepares the command to run each R script.
It prints appropriate messages based on whether the paths exist or not.

Running the R Scripts
The code checks if the R script path exists, prepares and runs the R script, measures and displays the execution time and size of the output, and handles any exceptions that occur.


"""

# -------------------------------------------------------------------- Libraries used  ------------------------------------------------------
import os
import subprocess
import time
import glob

# -------------------------------------------------------------------- Setting up the Working Directory ------------------------------------------------------
# Retrieve the current user's login name
UserName = os.getlogin()

# Construct the path for the working directory
set_wd = os.path.normpath(f"C:/Users/{UserName}/File/FakeLink - Data/")

# Check if the directory exists; if not, switch to the OneDrive path
if not os.path.exists(set_wd):
    set_wd = os.path.normpath(f"C:/Users/{UserName}/ThreeDrive - File/FakeLink - Data/")

# Change the current working directory to set_wd
os.chdir(set_wd)

# Define the OneDrive path (assuming this is the user's OneDrive directory)
one_drive_path = os.path.normpath(f"C:/Users/{UserName}/ThreeDrive - File")


# This is for Debugging to check if out path Exsists
"""
# Verify if the OneDrive path exists
if not os.path.exists(one_drive_path):
    raise FileNotFoundError(f"TheeDrive path '{Three_drive_path}' does not exist.")
else:
    print(f"OneDrive path '{Three_drive_path}' exists and is ready to run scripts.")
   """

# -------------------------------------------------------------------- Setting up the Working Directory ------------------------------------------------------
"""
  ⠀⣾⣿⣿⣷⣄
⠀⠀⠀⢸⣿⣿⣿⣿⣿⣧⣴⣶⣶⣶⣄
⠀⠀⠀⣀⣿⣿⡿⠻⣿⣿⣿⣿⣿⣿⣿⡄
⠀⠀⠀⢇⠠⣏⡖⠒⣿⣿⣿⣿⣿⣿⣿⣧⡀
⠀⠀⢀⣷⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷     Space between sections
⠀⠀⢸⣿⣿⡿⢋⠁⠀⠀⠀⠀⠉⡙⢿⣿⣿⡇
⠀⠀⠘⣿⣿⠀⣿⠇⠀⢀⠀⠀⠘⣿⠀⣿⡿⠁
⠀⠀⠀⠈⠙⠷⠤⣀⣀⣐⣂⣀⣠⠤⠾⠋⠁

"""  
# -------------------------------------------------------------------- FILES BEING READ IN -------------------------------------------------------------------

# List of R script filenames
rscript_filenames =[ "CSSP3.R"
                    #,"IAVM_Proccessing.R"
                    #,"PAC_AVD_Session_Proc.R"
                    #,"AVD_Cost.R"
                    #,"Daily and Monthy Active Users Archive.R"
                    #,"AUDS.R"
                    #,"AVD_Users.R"
                    # Add more script filenames here
                     ]


# Function to find the newest R script
def find_newest_r_script():
    r_dir = os.path.normpath(r"C:\Program Files\R")
    r_versions = glob.glob(os.path.join(r_dir, "R-*"))
    r_versions.sort(key=lambda x: os.path.getctime(x), reverse=True)
    newest_r_version = r_versions[0]
    return os.path.join(newest_r_version, "bin", "Rscript.exe")



# Construct and verify file paths dynamically
for filename in rscript_filenames:
    rscript_path = os.path.normpath(os.path.join(Three_drive_path, "FakeLink - Documents", "R", filename))
   
    # This is checking if the Rpath exists.
    if os.path.exists(rscript_path):
        try:
            # Specify the full path to Rscript executable
            """
            This is needed or it will not run. Used the function above to find the newest R.
            """
            rscript_exec = find_newest_r_script() #

            # Enclose both paths in double quotes to handle spaces
            command = f'"{rscript_exec}" "{rscript_path}"'
           
            # Print the name of the file and a simple message
            print(f""" -->'{filename}' is ready to be run: {command}""")
        except Exception as e:
            print(f"Failed to prepare the script '{rscript_path}': {e}")
    else:
        print(f"R script path '{rscript_path}' does not exist.")

   
                                       

 # -------------------------------------------------------------------- FILES BEING READ IN -------------------------------------------------------------------  
"""
  ⠀⣾⣿⣿⣷⣄
⠀⠀⠀⢸⣿⣿⣿⣿⣿⣧⣴⣶⣶⣶⣄
⠀⠀⠀⣀⣿⣿⡿⠻⣿⣿⣿⣿⣿⣿⣿⡄
⠀⠀⠀⢇⠠⣏⡖⠒⣿⣿⣿⣿⣿⣿⣿⣧⡀
⠀⠀⢀⣷⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷     Space between sections
⠀⠀⢸⣿⣿⡿⢋⠁⠀⠀⠀⠀⠉⡙⢿⣿⣿⡇
⠀⠀⠘⣿⣿⠀⣿⠇⠀⢀⠀⠀⠘⣿⠀⣿⡿⠁
⠀⠀⠀⠈⠙⠷⠤⣀⣀⣐⣂⣀⣠⠤⠾⠋⠁

"""  
   
   
# -------------------------------------------------------------------- Running the R Scripts  -------------------------------------------------------------------    
   
    # Running the scripts
if os.path.exists(rscript_path):
        try:
            # Enclose both paths in double quotes to handle spaces
            command = f'"{rscript_exec}" "{rscript_path}"'
           
            # Print the name of the file and a simple message
            print(f"""                                    
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⢦⣾⣷⠶⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠛⠟⠈⡿⡀⢹⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⡠⠖⢲⢅⢯⡁⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠠⢔⠥⠐⠸⣧⣆⠁⠹⠀⠀⠀⢀⣀⠀
⠀⠀⠀⠀⠀⠀⢆⡄⠀⠀⢹⢈⠑⣾⡡⢄⡒⠞⠛⠀     !Running the R scripts!
⠀⠀⠀⠀⠀⠀⠈⣄⢆⢀⣾⣟⣰⠀⠉⠁⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠁⣼⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⡰⢿⣿⡿⠉⠢⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⡰⠁⢀⠎⠙⠦⡀⠀⢄⠀⠀⠀⠀
⠀⠀⠀⠀⣀⠤⠖⢁⠔⠁⠀⠀⠀⠈⢳⠸⠀⠀⠀⠀
⢀⣀⡠⢊⠥⠚⠉⠁⠀⠀⠀⠀⠀⠀⠸⡄⠃⠀⠀⠀
⢸⢟⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⡘⡀⠀⠀
⠘⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣷⣣⠄⣀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠙⠛⠛⠉⠉⠉⠉⠁
'{filename}' is running: {command}
""")
        except Exception as e:
            print(f"Failed to prepare the script to run. '{rscript_path}': {e}")
else:
        print(f"R script path '{rscript_path}' does not exist.")

# Measure and display execution time and row count
try:
    # Measure start time
    start_time = time.time()

    # Run the command and capture output
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
   
    # Measure end time
    end_time = time.time()
   
    # Calculate duration
    duration = end_time - start_time
   
    # calculate size of the stdout
    output_size = len(result.stdout.encode('utf-8'))
   
    # Print the results in the desired format
    print(f"CSSP finished in {duration:.2f} seconds and produced a file the size of {output_size} KB")
    print("RESULT", result.stdout)
    #print("stderr:", result.stderr)
except Exception as e:
    print(f"Failed to run script {rscript_path}: {e}")

# -------------------------------------------------------------------- Running the R Scripts  -------------------------------------------------------------------    
"""
  ⠀⣾⣿⣿⣷⣄
⠀⠀⠀⢸⣿⣿⣿⣿⣿⣧⣴⣶⣶⣶⣄
⠀⠀⠀⣀⣿⣿⡿⠻⣿⣿⣿⣿⣿⣿⣿⡄
⠀⠀⠀⢇⠠⣏⡖⠒⣿⣿⣿⣿⣿⣿⣿⣧⡀
⠀⠀⢀⣷⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷     Space between sections
⠀⠀⢸⣿⣿⡿⢋⠁⠀⠀⠀⠀⠉⡙⢿⣿⣿⡇
⠀⠀⠘⣿⣿⠀⣿⠇⠀⢀⠀⠀⠘⣿⠀⣿⡿⠁
⠀⠀⠀⠈⠙⠷⠤⣀⣀⣐⣂⣀⣠⠤⠾⠋⠁

"""  

# -------------------------------------------------------------------- Modifications  -------------------------------------------------------------------    
# When ever you do a modification, please add the item below to track the changes.
#InitialsDate
#CCM01/01/2025
